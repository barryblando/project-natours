// apply a natural box layout model to all elements,
// but allowing components to change, so use inherit.

// This gives you the box model you want. Applies it to all elements.
// Turns out many browsers already use border-box for a lot of
// form elements (which is why inputs and text areas look diff at width:100%;)
//  But applying this to all elements is safe and wise.

// -- Keyword values --
// box-sizing: content-box;
// box-sizing: border-box;

// -- Global values --
// box-sizing: inherit;
// box-sizing: initial;
// box-sizing: unset;

*,
*:not(img),
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  // root: HTML
  // 10px easy to calculate w/ relative units but use percentage,
  // if user change browser font size page will be responsive
  // This defines what 1rem is, is what defines the size of the entire layout.
  // by using rem, it will make the entire layout of the webpage dependent on the font-size
  font-size: 62.5%; // 1rem = 10px, 10/16 = 62.5%;

  // Don't need phone media query cause it's already declared by tab-port, it will apply automatically
  // when in media query always put the large one first before the smaller one, so no conflict, cause this project is using desktop approach

  @include respond(tab-land) { // width < 1200?
    font-size: 56.25%; // 1 rem = 9px, 9/16 = 56.25%
  }

  @include respond(tab-port) { // width < 900?
    font-size: 50%; // 1 rem = 8px, 8/16 = 50%
  }

  @include respond(big-desktop) {
    font-size: 75%; // 1 rem = 12px, 12/16 = 75%
  }
}

body {
  color: $color-grey-dark-1;
  padding: 3rem;

  box-sizing: border-box;
}
